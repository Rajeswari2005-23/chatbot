#less.py
import torch
from transformers import AutoTokenizer, BitsAndBytesConfig, AutoModelForCausalLM
from peft import PeftModel
import gradio as gr
import argparse
import logging
import json
import difflib

# 1. Parse Arguments
parser = argparse.ArgumentParser(description="Run dual-model chatbot")
parser.add_argument("--model_dir", type=str, default="./outputs/final_model", help="Path to fine-tuned model dir")
args = parser.parse_args()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# 2. Load Tokenizer
logger.info("Loading tokenizer...")
tokenizer = AutoTokenizer.from_pretrained(args.model_dir, trust_remote_code=True)
tokenizer.pad_token = tokenizer.eos_token

# 3. Quantization Config
bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_compute_dtype=torch.float16,
    bnb_4bit_use_double_quant=True,
    bnb_4bit_quant_type="nf4"
)

# 4. Load Fine-tuned Model (with LoRA)
logger.info("Loading fine-tuned model...")
base_model = AutoModelForCausalLM.from_pretrained(
    "teknium/OpenHermes-2.5-Mistral-7B",
    quantization_config=bnb_config,
    device_map="auto",
    trust_remote_code=True
)
finetuned_model = PeftModel.from_pretrained(
    base_model,
    args.model_dir
)
finetuned_model.eval()

# Load test.json for keyword-based responses
with open("test.json", "r", encoding="utf-8") as f:
    dataset_qa = json.load(f)

def find_dataset_item(user_input):
    user_input_lower = user_input.strip().lower()
    instructions = [item["instruction"].strip().lower() for item in dataset_qa]
    # Try exact match
    for idx, instr in enumerate(instructions):
        if instr == user_input_lower:
            return dataset_qa[idx]
    # Try substring match
    for idx, instr in enumerate(instructions):
        if instr in user_input_lower or user_input_lower in instr:
            return dataset_qa[idx]
    # Always return the closest fuzzy match (even if weak)
    close_matches = difflib.get_close_matches(user_input_lower, instructions, n=1, cutoff=0.0)
    if close_matches:
        idx = instructions.index(close_matches[0])
        return dataset_qa[idx]
    # Should never reach here if dataset is not empty
    return dataset_qa[0]

def chat(user_input, history):
    history = history or []
    item = find_dataset_item(user_input)
    # Use the user's question as the instruction, and optionally the matched input as context
    prompt = f"### Instruction:\n{user_input.strip()}\n\n### Input:{item['input'].strip()}\n\n### Response:\n"
    inputs = tokenizer(prompt, return_tensors="pt").to(finetuned_model.device)
    with torch.no_grad():
        output = finetuned_model.generate(
            **inputs,
            max_new_tokens=256,
            do_sample=False,
            temperature=0.7,
            top_p=0.9,
            repetition_penalty=1.1,
            pad_token_id=tokenizer.eos_token_id,
            eos_token_id=tokenizer.eos_token_id
        )
    decoded = tokenizer.decode(output[0], skip_special_tokens=True)
    if "### Response:" in decoded:
        reply = decoded.split("### Response:")[-1].strip()
    else:
        reply = decoded.strip()

    history.append({"role": "user", "content": user_input})
    history.append({"role": "assistant", "content": reply})
    return history, history

# 8. Gradio UI
with gr.Blocks() as demo:
    gr.Markdown("## ðŸ¤–  Chatbot â€” Dual Mode (Fine-tuned + Base)")
    chatbot = gr.Chatbot(label="Chat", type="messages")
    msg = gr.Textbox(placeholder="Ask something...", label="Your Question")
    state = gr.State([])

    msg.submit(chat, [msg, state], [chatbot, state])
    msg.submit(lambda: "", None, msg)

demo.launch(server_name="127.0.0.1")


#tech.py
import argparse
import logging
import json
from datasets import Dataset
from transformers import (
    AutoTokenizer,
    AutoModelForCausalLM,
    TrainingArguments,
    Trainer,
    BitsAndBytesConfig,
)
from peft import prepare_model_for_kbit_training, LoraConfig, get_peft_model
import torch

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def tokenize_function(examples, tokenizer):
    prompts = [
        f"### Instruction:\n{instr}\n\n### Input:\n{inp}\n\n### Response:\n"
        for instr, inp in zip(examples["instruction"], examples["input"])
    ]
    full_texts = [prompt + out for prompt, out in zip(prompts, examples["output"])]
    tokenized = tokenizer(
        full_texts,
        truncation=True,
        padding="max_length",
        max_length=1024,
    )
    tokenized["labels"] = tokenized["input_ids"].copy()
    return tokenized

def load_local_dataset(path):
    with open(path, "r", encoding="utf-8") as f:
        data = json.load(f)
    assert all(k in data[0] for k in ["instruction", "input", "output"]), "Missing keys"
    return Dataset.from_list(data)

def main(args):
    logger.info("Loading dataset...")
    dataset = load_local_dataset(args.data_path)
    split = dataset.train_test_split(test_size=0.2)

    logger.info("Loading tokenizer...")
    tokenizer = AutoTokenizer.from_pretrained(args.model_name, trust_remote_code=True)
    tokenizer.pad_token = tokenizer.eos_token

    logger.info("Preparing 4-bit quantized model...")
    bnb_config = BitsAndBytesConfig(
        load_in_4bit=True,
        bnb_4bit_compute_dtype=torch.float16,
        bnb_4bit_use_double_quant=True,
        bnb_4bit_quant_type="nf4"
    )

    model = AutoModelForCausalLM.from_pretrained(
        args.model_name,
        trust_remote_code=True,
        quantization_config=bnb_config,
        device_map="auto"
    )

    model = prepare_model_for_kbit_training(model)

    lora_config = LoraConfig(
        r=16,
        lora_alpha=32,
        lora_dropout=0.1,
        bias="none",
        task_type="CAUSAL_LM",
        target_modules=[
            "q_proj", "k_proj", "v_proj", "o_proj",
            "gate_proj", "up_proj", "down_proj"
        ]
    )
    model = get_peft_model(model, lora_config)

    logger.info("Tokenizing dataset...")
    tokenized = split.map(
        lambda x: tokenize_function(x, tokenizer),
        batched=True,
        remove_columns=split["train"].column_names,
    )

    training_args = TrainingArguments(
        output_dir=args.output_dir,
        per_device_train_batch_size=1,
        gradient_accumulation_steps=16,
        learning_rate=1e-4,
        num_train_epochs=5,
        logging_steps=10,
        save_strategy="epoch",
        evaluation_strategy="steps",
        eval_steps=50,
        warmup_steps=100,
        gradient_checkpointing=True,
        gradient_checkpointing_kwargs={"use_reentrant": False},
        fp16=True,
        optim="adamw_torch",
        max_grad_norm=0.3,
        weight_decay=0.01,
        remove_unused_columns=False,
    )

    trainer = Trainer(
        model=model,
        args=training_args,
        train_dataset=tokenized["train"],
        eval_dataset=tokenized["test"],
    )

    model.print_trainable_parameters()

    logger.info("Training...")
    trainer.train()

    logger.info("Saving model and tokenizer...")
    model.save_pretrained(args.save_model_dir)
    tokenizer.save_pretrained(args.save_model_dir)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--model_name", type=str, default="teknium/OpenHermes-2.5-Mistral-7B")
    parser.add_argument("--data_path", type=str, default="test.json")
    parser.add_argument("--output_dir", type=str, default="./outputs")
    parser.add_argument("--save_model_dir", type=str, default="./outputs/final_model")
    args = parser.parse_args()
    main(args)



